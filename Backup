[
    {
        "id": "8a78fc9bf03685af",
        "type": "tab",
        "label": "Gestion ZIGBEE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "TEST CONNEXION INTERNET",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f4db60bf.7cb8c",
        "type": "tab",
        "label": "AUTOMATISMES MAISON",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7cc13ada.b6712c",
        "type": "subflow",
        "name": "timerange",
        "info": "Lets through or blocks a payload\nbased on a time range. This can\neither be configured through the\nenviroment variables in the node ui\nor as described below with a message\nthat has an override topic.\nIf in range the msg will be passed\nto the first output and otherwise\nto the second.\nThe start and stop time needs\nto be defined in an hh:mm format.\nThere is also a week array. The week\nstarts on monday so 4 for example is\nThursday. Payload will only be passed\non days that are in the array.\nOut of time range payloads will\nbe redirected to the second output.\nThe schedule can be overriden by injecting\na message with the topic of \"override\"\nthat contains a ```msg.payload``` object with the\nkeys of \"start\",\"stop\",\"days\" like\nthis:\n```\n{\n    \"start\": \"10:00\",\n    \"stop\": \"14:00\",\n    \"days\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n    ]\n}\n```\nStart and stop need to be strings in the hh:mm\nformat and days an array of numbers as\ndescribed above.\nThe override can be deleted by injecting a\nmsg.payload string \"reset\".",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "da7f7d3f.da5af"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 60,
                "wires": [
                    {
                        "id": "694ce0e1.4bee58",
                        "port": 0
                    }
                ]
            },
            {
                "x": 620,
                "y": 140,
                "wires": [
                    {
                        "id": "694ce0e1.4bee58",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "start",
                "type": "str",
                "value": "00:00",
                "ui": {
                    "icon": "font-awesome/fa-arrow-right",
                    "label": {
                        "en-US": "from hh:mm"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "stop",
                "type": "str",
                "value": "00:00",
                "ui": {
                    "icon": "font-awesome/fa-circle",
                    "label": {
                        "en-US": "until hh:mm"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "days",
                "type": "json",
                "value": "[1,2,3,4,5,6,7]",
                "ui": {
                    "icon": "font-awesome/fa-calendar",
                    "label": {
                        "en-US": "days"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#C7E9C0",
        "inputLabels": [
            "payload input"
        ],
        "outputLabels": [
            "in time range",
            "out of time range"
        ],
        "icon": "node-red/switch.svg",
        "status": {
            "x": 480,
            "y": 200,
            "wires": [
                {
                    "id": "1bc56c04.ca0a3c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e102e7aa.73033",
        "type": "group",
        "z": "f4db60bf.7cb8c",
        "name": "Vérification du bon fonctionnement de l'IPX",
        "style": {
            "label": true
        },
        "nodes": [
            "6b83445f.95ef74",
            "60345379.7335cc",
            "93a6bc32.964338",
            "6a44f6d2.63742",
            "61b330c0.943d4",
            "32fe9461.a31a9c",
            "688d8710.dd2ff8",
            "3443a94b.1d3d2e",
            "62f42068.824698",
            "92e23916.20c6b"
        ],
        "x": 44,
        "y": 119
    },
    {
        "id": "3e85591c6b28eec5",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "Vérification qualité de connexion internet - Reset si nécessaire",
        "style": {
            "label": true
        },
        "nodes": [
            "6e3ae73fd6dca1b5",
            "33e459f5b49c6a18",
            "2811ceaac726f243",
            "fa8980c41453d441",
            "8b89075617fd1890",
            "e90c0aba2c2dbf5b",
            "ab99bb39a27eee06",
            "b0fe8155417905e8",
            "99b24abfc303375b",
            "acf7a47b6f6e79f6",
            "e1d7c466b429a061",
            "2d8b2236898a1199",
            "22ac9e4da1fe5ebc",
            "5fb69172.b3471",
            "892f85fd.ddf898",
            "d821318e160c0e62",
            "33de0144ba188644",
            "a56be7fea2f10b19",
            "485a7a75bd474437",
            "9dade99a33b4458d"
        ],
        "x": 34,
        "y": 239,
        "w": 952,
        "h": 442
    },
    {
        "id": "010dbb615bda4d4e",
        "type": "group",
        "z": "8a78fc9bf03685af",
        "name": "Connexion au système Zigbee2Mqtt",
        "style": {
            "label": true
        },
        "nodes": [
            "558f9b7183aac2bc",
            "a4c57c169d5aacf3"
        ],
        "x": 34,
        "y": 19,
        "w": 492,
        "h": 82
    },
    {
        "id": "5f2614821fc98646",
        "type": "group",
        "z": "8a78fc9bf03685af",
        "name": "Gestion de l'éclairage dans la chambre des parents",
        "style": {
            "label": true
        },
        "nodes": [
            "476a22d8152cdc57",
            "2f6110e39eb4ed78",
            "fa583c2e352ebefb"
        ],
        "x": 34,
        "y": 119,
        "w": 712,
        "h": 122
    },
    {
        "id": "88283a1bd84fdbce",
        "type": "group",
        "z": "8a78fc9bf03685af",
        "name": "Gestion de l'éclairage dans l'escalier",
        "style": {
            "label": true
        },
        "nodes": [
            "88825c69e6b4406d",
            "d9dcb29b79a10e9b",
            "af162e119d899f79",
            "25a9d013c63a9aaf",
            "d6c518aaab31fad7",
            "b2a6e10e71fecbe4",
            "341197126f350c5d",
            "2b0affa0c70bef38",
            "53a0c6fe363eab8b",
            "5a300b5c8797c7d0",
            "b2c1c31135250f08",
            "391d39ebc14d49c7",
            "85670a344f522997",
            "37b283ee0e20393e",
            "17bf05f535deb88e"
        ],
        "x": 34,
        "y": 259,
        "w": 1332,
        "h": 342
    },
    {
        "id": "89dc8d7d73b0afd3",
        "type": "group",
        "z": "8a78fc9bf03685af",
        "name": "Gestion Eclairage poubelle",
        "style": {
            "label": true
        },
        "nodes": [
            "967fa7eb7d450c61",
            "5976452880a7a5dc",
            "4fa85a3fc565a9ba",
            "2693e72fb25c1949",
            "65501524b171f0fb",
            "32bf6e879c1b2732"
        ],
        "x": 34,
        "y": 619,
        "w": 792,
        "h": 222
    },
    {
        "id": "ab3eeb9e267c29b8",
        "type": "group",
        "z": "8a78fc9bf03685af",
        "name": "Gestion extraction air Suzanne",
        "style": {
            "label": true
        },
        "nodes": [
            "a122a79d4494810f",
            "5dac8e61d99847a3",
            "2b7284cce37ba6de",
            "737c6e426a364559",
            "e90ffae1f31572e6",
            "b0470f9c71dffca1",
            "b1e7d727faf9950e",
            "011462622c106d5f",
            "98d5b6f6b6c06c65",
            "cb3c6bbbf342522c",
            "144c1d82ed799493"
        ],
        "x": 34,
        "y": 859,
        "w": 832,
        "h": 342
    },
    {
        "id": "18c1bbfb6a2451d9",
        "type": "zigbee2mqtt-server",
        "name": "",
        "host": "localhost",
        "mqtt_port": "1883",
        "mqtt_username": "",
        "mqtt_password": "",
        "mqtt_qos": "0",
        "tls": "",
        "usetls": false,
        "base_topic": "zigbee2mqtt"
    },
    {
        "id": "0ca1a15e29858943",
        "type": "email-transport",
        "name": "Iot_OVH",
        "host": "ssl0.ovh.net",
        "port": "465",
        "secure": true,
        "authType": "login",
        "proxy": ""
    },
    {
        "id": "694ce0e1.4bee58",
        "type": "function",
        "z": "7cc13ada.b6712c",
        "name": "is in range?",
        "func": "const schedule = flow.get(\"schedule\");\nlet start = env.get(\"start\");\nlet stop = env.get(\"stop\");\nlet days = env.get(\"days\");\nif(schedule !== undefined){\n    start = schedule.start;\n    stop = schedule.stop;\n    days = schedule.days;\n}\nconst time = new Date();\nlet day = time.getDay();\nif(day === 0) day = 7;\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nconst hmtime = hour + \":\" + minute;\nif(days.includes(day)){\n    if(start == stop){\n        return [msg, null];\n    } else if(start > stop){\n        if(hmtime >= start || hmtime < stop){\n            return [msg, null];\n        } else {\n            return [null, msg];\n        }\n    } else if(hmtime >= start && hmtime < stop){\n        return [msg, null];\n    } else {\n        return [null, msg];\n    }\n} else {\n    return null;\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "94dc9c00.0f576",
        "type": "inject",
        "z": "7cc13ada.b6712c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "1bc56c04.ca0a3c"
            ]
        ]
    },
    {
        "id": "1bc56c04.ca0a3c",
        "type": "function",
        "z": "7cc13ada.b6712c",
        "name": "display rule",
        "func": "const schedule = flow.get(\"schedule\");\nif(typeof schedule == \"object\"){\n    const start = schedule.start;\n    const stop = schedule.stop;\n    const days = String(schedule.days).replace(/1/g,\"Mo\").replace(/2/g,\"Tu\").replace(/3/g,\"We\").replace(/4/g,\"Th\").replace(/5/g,\"Fr\").replace(/6/g,\"Sa\").replace(/7/g,\"Su\");\n    msg.payload = \"override: \" + start + \"-\" + stop + \"/\" + days;\n} else {\n    const start = env.get(\"start\");\n    const stop = env.get(\"stop\");\n    const days = String(env.get(\"days\")).replace(/1/g,\"Mo\").replace(/2/g,\"Tu\").replace(/3/g,\"We\").replace(/4/g,\"Th\").replace(/5/g,\"Fr\").replace(/6/g,\"Sa\").replace(/7/g,\"Su\");\n    const override = false;\n    msg.payload = start + \"-\" + stop + \"/\" + days;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "da7f7d3f.da5af",
        "type": "function",
        "z": "7cc13ada.b6712c",
        "name": "check for override",
        "func": "if(msg.topic == \"override\"){\n    flow.set(\"schedule\",msg.payload);\n    return [null, msg];\n} else if (msg.payload == \"reset\"){\n    let reset;\n    flow.set(\"schedule\",reset);\n    return [null, msg];\n} else {\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "694ce0e1.4bee58"
            ],
            [
                "1bc56c04.ca0a3c"
            ]
        ]
    },
    {
        "id": "a4c57c169d5aacf3",
        "type": "zigbee2mqtt-bridge",
        "z": "8a78fc9bf03685af",
        "g": "010dbb615bda4d4e",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "topic": null,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "558f9b7183aac2bc"
            ]
        ]
    },
    {
        "id": "476a22d8152cdc57",
        "type": "zigbee2mqtt-in",
        "z": "8a78fc9bf03685af",
        "g": "5f2614821fc98646",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Inter_Parents (E1743)",
        "device_id": "0x84b4dbfffefe8703",
        "state": "action",
        "outputAtStartup": true,
        "filterChanges": false,
        "enableMultiple": false,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "2f6110e39eb4ed78",
                "fa583c2e352ebefb"
            ]
        ]
    },
    {
        "id": "2f6110e39eb4ed78",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "5f2614821fc98646",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "0x00124b0024c0026c (ZBMINI-L)",
        "device_id": "0x00124b0024c0026c",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "payload",
        "payloadType": "msg",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "88825c69e6b4406d",
        "type": "zigbee2mqtt-in",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Detecteur palier (E1525/E1745)",
        "device_id": "0x680ae2fffe161575",
        "state": "0",
        "outputAtStartup": true,
        "filterChanges": true,
        "enableMultiple": false,
        "x": 210,
        "y": 320,
        "wires": [
            [
                "85670a344f522997",
                "5a300b5c8797c7d0"
            ]
        ]
    },
    {
        "id": "d9dcb29b79a10e9b",
        "type": "zigbee2mqtt-in",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Detecteur escalier (E1525/E1745)",
        "device_id": "0x842e14fffe4369dc",
        "state": "0",
        "outputAtStartup": true,
        "filterChanges": true,
        "enableMultiple": false,
        "x": 220,
        "y": 360,
        "wires": [
            [
                "85670a344f522997",
                "5a300b5c8797c7d0"
            ]
        ]
    },
    {
        "id": "af162e119d899f79",
        "type": "delay",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 380,
        "wires": [
            [
                "25a9d013c63a9aaf"
            ]
        ]
    },
    {
        "id": "25a9d013c63a9aaf",
        "type": "change",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "EXTINCTION",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 380,
        "wires": [
            [
                "37b283ee0e20393e"
            ]
        ]
    },
    {
        "id": "d6c518aaab31fad7",
        "type": "inject",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "Baisse luminosite le soir 21:30",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 21 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "341197126f350c5d"
            ]
        ]
    },
    {
        "id": "b2a6e10e71fecbe4",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Lampes_Escalier 0 a 1",
        "device_id": "0",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "payload",
        "payloadType": "msg",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 1180,
        "y": 500,
        "wires": []
    },
    {
        "id": "341197126f350c5d",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Lampes_Escalier 0 a 1",
        "device_id": "0",
        "command": "brightness",
        "commandType": "z2m_cmd",
        "payload": "30",
        "payloadType": "num",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 460,
        "y": 500,
        "wires": []
    },
    {
        "id": "2b0affa0c70bef38",
        "type": "inject",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "Luminosité max le matin 6:20",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "20 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "255",
        "payloadType": "num",
        "x": 210,
        "y": 560,
        "wires": [
            [
                "53a0c6fe363eab8b"
            ]
        ]
    },
    {
        "id": "53a0c6fe363eab8b",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Lampes_Escalier 0 a 1",
        "device_id": "0",
        "command": "brightness",
        "commandType": "z2m_cmd",
        "payload": "255",
        "payloadType": "num",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 460,
        "y": 560,
        "wires": []
    },
    {
        "id": "5a300b5c8797c7d0",
        "type": "switch",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "Si Présence",
        "property": "payload.occupancy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "391d39ebc14d49c7"
            ],
            [
                "25a9d013c63a9aaf"
            ]
        ]
    },
    {
        "id": "b2c1c31135250f08",
        "type": "change",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "ALLUMAGE",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ON",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 340,
        "wires": [
            [
                "af162e119d899f79",
                "37b283ee0e20393e"
            ]
        ]
    },
    {
        "id": "391d39ebc14d49c7",
        "type": "switch",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "Si luminosité forte (journée)",
        "property": "payload.illuminance_above_threshold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 300,
        "wires": [
            [
                "b2c1c31135250f08"
            ]
        ]
    },
    {
        "id": "85670a344f522997",
        "type": "debug",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "Debug detecteurs escaliers",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 440,
        "wires": []
    },
    {
        "id": "5976452880a7a5dc",
        "type": "zigbee2mqtt-in",
        "z": "8a78fc9bf03685af",
        "g": "89dc8d7d73b0afd3",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Detecteur poubelles (E1525/E1745)",
        "device_id": "0x842e14fffe8d8729",
        "state": "occupancy",
        "outputAtStartup": true,
        "filterChanges": true,
        "enableMultiple": false,
        "x": 200,
        "y": 740,
        "wires": [
            [
                "4fa85a3fc565a9ba",
                "65501524b171f0fb"
            ]
        ]
    },
    {
        "id": "967fa7eb7d450c61",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "89dc8d7d73b0afd3",
        "name": "Allumage",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Lampe poubelle (LED1836G9)",
        "device_id": "0x842e14fffe4d96de",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "ON",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 700,
        "y": 700,
        "wires": []
    },
    {
        "id": "4fa85a3fc565a9ba",
        "type": "debug",
        "z": "8a78fc9bf03685af",
        "g": "89dc8d7d73b0afd3",
        "name": "Debug detecteur poubelles",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "558f9b7183aac2bc",
        "type": "debug",
        "z": "8a78fc9bf03685af",
        "g": "010dbb615bda4d4e",
        "name": "ZigbeeBridge",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "fa583c2e352ebefb",
        "type": "debug",
        "z": "8a78fc9bf03685af",
        "g": "5f2614821fc98646",
        "name": "Eclairage chambre parents",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "a122a79d4494810f",
        "type": "zigbee2mqtt-in",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Inter aeration Suzanne (E1743)",
        "device_id": "0xec1bbdfffe991a72",
        "state": "action",
        "outputAtStartup": true,
        "filterChanges": false,
        "enableMultiple": false,
        "x": 190,
        "y": 900,
        "wires": [
            [
                "737c6e426a364559"
            ]
        ]
    },
    {
        "id": "5dac8e61d99847a3",
        "type": "delay",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 1000,
        "wires": [
            [
                "2b7284cce37ba6de"
            ]
        ]
    },
    {
        "id": "2b7284cce37ba6de",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Extraction OFF",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Extraction d’air chambre Suzanne (E1603/E1702/E1708)",
        "device_id": "0x14b457fffec4f7cc",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "off",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 760,
        "y": 900,
        "wires": []
    },
    {
        "id": "737c6e426a364559",
        "type": "switch",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 940,
        "wires": [
            [
                "2b7284cce37ba6de"
            ],
            [
                "e90ffae1f31572e6",
                "5dac8e61d99847a3"
            ]
        ]
    },
    {
        "id": "e90ffae1f31572e6",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Extraction ON",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Extraction d’air chambre Suzanne (E1603/E1702/E1708)",
        "device_id": "0x14b457fffec4f7cc",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "on",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 560,
        "y": 960,
        "wires": []
    },
    {
        "id": "b0470f9c71dffca1",
        "type": "inject",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Matin Semaine",
        "props": [],
        "repeat": "",
        "crontab": "00 08 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "98d5b6f6b6c06c65",
                "011462622c106d5f"
            ]
        ]
    },
    {
        "id": "b1e7d727faf9950e",
        "type": "inject",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Matin Week-End",
        "props": [],
        "repeat": "",
        "crontab": "00 08 * * 6,0",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "98d5b6f6b6c06c65",
                "011462622c106d5f"
            ]
        ]
    },
    {
        "id": "011462622c106d5f",
        "type": "delay",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 1100,
        "wires": [
            [
                "2b7284cce37ba6de"
            ]
        ]
    },
    {
        "id": "98d5b6f6b6c06c65",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Extraction ON",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Extraction d’air chambre Suzanne (E1603/E1702/E1708)",
        "device_id": "0x14b457fffec4f7cc",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "on",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 560,
        "y": 1060,
        "wires": []
    },
    {
        "id": "cb3c6bbbf342522c",
        "type": "inject",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Midi",
        "props": [],
        "repeat": "",
        "crontab": "55 11 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "98d5b6f6b6c06c65",
                "011462622c106d5f"
            ]
        ]
    },
    {
        "id": "144c1d82ed799493",
        "type": "inject",
        "z": "8a78fc9bf03685af",
        "g": "ab3eeb9e267c29b8",
        "name": "Soir",
        "props": [],
        "repeat": "",
        "crontab": "55 19 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "98d5b6f6b6c06c65",
                "011462622c106d5f"
            ]
        ]
    },
    {
        "id": "2693e72fb25c1949",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "89dc8d7d73b0afd3",
        "name": "Extinction",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Lampe poubelle (LED1836G9)",
        "device_id": "0x842e14fffe4d96de",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "OFF",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 700,
        "y": 760,
        "wires": []
    },
    {
        "id": "65501524b171f0fb",
        "type": "switch",
        "z": "8a78fc9bf03685af",
        "g": "89dc8d7d73b0afd3",
        "name": "Si Présence",
        "property": "payload.occupancy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 720,
        "wires": [
            [
                "967fa7eb7d450c61",
                "32bf6e879c1b2732"
            ],
            [
                "2693e72fb25c1949"
            ]
        ]
    },
    {
        "id": "32bf6e879c1b2732",
        "type": "delay",
        "z": "8a78fc9bf03685af",
        "g": "89dc8d7d73b0afd3",
        "name": "",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 660,
        "wires": [
            [
                "2693e72fb25c1949"
            ]
        ]
    },
    {
        "id": "37b283ee0e20393e",
        "type": "subflow:7cc13ada.b6712c",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "Tard?",
        "env": [
            {
                "name": "start",
                "value": "22:30",
                "type": "str"
            },
            {
                "name": "stop",
                "value": "7:00",
                "type": "str"
            }
        ],
        "x": 910,
        "y": 520,
        "wires": [
            [
                "17bf05f535deb88e"
            ],
            [
                "b2a6e10e71fecbe4"
            ]
        ]
    },
    {
        "id": "17bf05f535deb88e",
        "type": "zigbee2mqtt-out",
        "z": "8a78fc9bf03685af",
        "g": "88283a1bd84fdbce",
        "name": "",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Lampe Escalier 2 (LED1836G9)",
        "device_id": "0x842e14fffe88a3a9",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "payload",
        "payloadType": "msg",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 1210,
        "y": 460,
        "wires": []
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e3ae73fd6dca1b5",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "99b24abfc303375b"
            ]
        ]
    },
    {
        "id": "ce99561c603a7eb8",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Utiliser : https://medium.com/@ioTnT/writing-data-from-node-red-to-csv-or-excel-without-extra-palettes-472655d490b6",
        "info": "",
        "x": 420,
        "y": 180,
        "wires": []
    },
    {
        "id": "33e459f5b49c6a18",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Génère MBps pour Mailing",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$string($round(payload.download.bandwidth*8/1000000,0)) & ' MBps. KO! Nouvelle mesure dans une minute.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 500,
        "wires": [
            [
                "e90c0aba2c2dbf5b",
                "a56be7fea2f10b19"
            ]
        ]
    },
    {
        "id": "2811ceaac726f243",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Si <20Mb/s",
        "property": "payload.download.bandwidth*8/1000000",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "lt",
                "v": "45",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "33e459f5b49c6a18"
            ]
        ]
    },
    {
        "id": "fa8980c41453d441",
        "type": "file",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Ecrit vers le fichier log",
        "filename": "/home/pi/Node-Red/Speedtest.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 760,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8b89075617fd1890",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Paramètre les données dans le log",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$string(payload.timestamp & ',' & $round(payload.download.bandwidth*8/1000000,0)) & ' MBps'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 540,
        "wires": [
            [
                "fa8980c41453d441",
                "b0fe8155417905e8"
            ]
        ]
    },
    {
        "id": "e90c0aba2c2dbf5b",
        "type": "email-send",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "transport": "0ca1a15e29858943",
        "from": "iot@clairealex.fr",
        "to": "alexandre.moulart@clairealex.fr",
        "cc": "alexandre.moulart@se.com",
        "bcc": "",
        "subject": "IOT : Connexion NET KO ou lente",
        "contentType": "text",
        "name": "Info Connexion KO",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "b0fe8155417905e8"
            ]
        ]
    },
    {
        "id": "ab99bb39a27eee06",
        "type": "speedtest",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "",
        "maxTime": 5000,
        "serverId": "",
        "acceptLicense": true,
        "acceptGdpr": true,
        "x": 200,
        "y": 460,
        "wires": [
            [
                "2811ceaac726f243",
                "8b89075617fd1890"
            ]
        ]
    },
    {
        "id": "b0fe8155417905e8",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Speedtest Log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "99b24abfc303375b",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Counter",
        "func": "// Define Variable and get stored flow value\n// if there is no stored value, then the value is 0\nvar counter = flow.get(\"counter\") || 0\n\n// Check the msg.topic property\n// If the topic is equal to reset then set the counter to 0\n// else add 1 to the counter value\nif (msg.topic == \"reset\") {\n    counter = 0\n    msg.topic = \"\"\n} else {\n    counter ++\n}\n\n// save the counter value in the flow variable\nflow.set(\"counter\", counter)\n\n// set msg.payload to counter value\nmsg.payload = counter\n\n// return msg Object\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 360,
        "wires": [
            [
                "acf7a47b6f6e79f6",
                "485a7a75bd474437"
            ]
        ]
    },
    {
        "id": "acf7a47b6f6e79f6",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Compteur supérieur à 3?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 360,
        "wires": [
            [
                "e1d7c466b429a061",
                "2d8b2236898a1199",
                "9dade99a33b4458d"
            ],
            [
                "ab99bb39a27eee06"
            ]
        ]
    },
    {
        "id": "e1d7c466b429a061",
        "type": "zigbee2mqtt-out",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "OFF Alim BOX",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Alim box internet (E1603/E1702/E1708)",
        "device_id": "0x385b44fffee335eb",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "off",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "2d8b2236898a1199",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 360,
        "wires": [
            [
                "22ac9e4da1fe5ebc"
            ]
        ]
    },
    {
        "id": "22ac9e4da1fe5ebc",
        "type": "zigbee2mqtt-out",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "ON Alim BOX",
        "server": "18c1bbfb6a2451d9",
        "friendly_name": "Alim box internet (E1603/E1702/E1708)",
        "device_id": "0x385b44fffee335eb",
        "command": "state",
        "commandType": "z2m_cmd",
        "payload": "on",
        "payloadType": "str",
        "optionsValue": "",
        "optionsType": "nothing",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "892f85fd.ddf898",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Récupération du fichier log",
        "func": "msg.topic = \"Fichier log de test de la connexion internet\"; // email subject\n\nmsg.payload = \"Voir fichier attaché\"; // email body\n\nmsg.email = {\n    attachments: [\n        {\n            // file on disk as an attachment\n            filename: \"Speedtest.log\",\n            path: \"/home/pi/Node-Red/Speedtest.log\" // stream this file\n        },],\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 640,
        "wires": [
            [
                "d821318e160c0e62"
            ]
        ]
    },
    {
        "id": "5fb69172.b3471",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "Envoi manuel du log",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "892f85fd.ddf898"
            ]
        ]
    },
    {
        "id": "d821318e160c0e62",
        "type": "email-send",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "transport": "0ca1a15e29858943",
        "from": "iot@clairealex.fr",
        "to": "alexandre.moulart@clairealex.fr",
        "cc": "alexandre.moulart@se.com",
        "bcc": "",
        "subject": "Fichier LOG Test Connexions Internet NodeRed",
        "contentType": "text",
        "name": "Envoi Fichier log",
        "x": 660,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "33de0144ba188644",
        "type": "email-send",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "transport": "0ca1a15e29858943",
        "from": "iot@clairealex.fr",
        "to": "alexandre.moulart@clairealex.fr",
        "cc": "alexandre.moulart@se.com",
        "bcc": "",
        "subject": "Redémarrage de la connexion internet",
        "contentType": "text",
        "name": "Info reset de la connexion",
        "x": 830,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a56be7fea2f10b19",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 460,
        "wires": [
            [
                "99b24abfc303375b"
            ]
        ]
    },
    {
        "id": "485a7a75bd474437",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "debug counter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 280,
        "wires": []
    },
    {
        "id": "9dade99a33b4458d",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "g": "3e85591c6b28eec5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 400,
        "wires": [
            [
                "33de0144ba188644"
            ]
        ]
    },
    {
        "id": "6b83445f.95ef74",
        "type": "http request",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Recupe status.xml de l'IPX",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://192.168.1.139/status.xml",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 420,
        "y": 160,
        "wires": [
            [
                "6a44f6d2.63742"
            ]
        ]
    },
    {
        "id": "60345379.7335cc",
        "type": "inject",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "VERIF IPX800",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "14400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "6b83445f.95ef74"
            ]
        ]
    },
    {
        "id": "93a6bc32.964338",
        "type": "debug",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Date OK, pas d'action",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "6a44f6d2.63742",
        "type": "xml",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "61b330c0.943d4"
            ]
        ]
    },
    {
        "id": "61b330c0.943d4",
        "type": "function",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Date OK?",
        "func": "var d = new Date();\nif (msg.payload.response.day[0].includes(d.getFullYear().toString()))\n{\n   return [ msg, null ];\n} else {\n    msg.topic = \"ALERTE IOT : IPX800\"\n    msg.payload = \"Redémarrage de l'IPX800 demandé.\"\n   return [ null, msg ];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 220,
        "wires": [
            [
                "93a6bc32.964338"
            ],
            [
                "32fe9461.a31a9c"
            ]
        ]
    },
    {
        "id": "32fe9461.a31a9c",
        "type": "http request",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Redémarrage de l'IPX800",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.139/protect/settings/reboot.htm?IPX800_V3",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 730,
        "y": 240,
        "wires": [
            [
                "688d8710.dd2ff8"
            ]
        ]
    },
    {
        "id": "688d8710.dd2ff8",
        "type": "debug",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Résultat redémarrage",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 240,
        "wires": []
    },
    {
        "id": "3443a94b.1d3d2e",
        "type": "comment",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Fonctionnement",
        "info": "Régulièrement l'IPX se dé-synchronise du serveur de temps.\nEn conséquence les tâches planifiées ne s'effectuent plus. Seul un redémarrage de l'IPX peut corriger le problème.\n\nLe flow se connecte à l'IPX et récupère le fichier status.xml contenant tous les états/compteurs de l'IPX ainsi que la valeur de son horloge. En fonction de cette valeur, il lance ou pas un redémarrage en se connectant à la page http://192.168.1.139/protect/settings/reboot.htm?IPX800_V3\nIl vérifie que l'année de la date renvoyée par le fichier xml est bien celle de l'année en cours ce qui montre que l'IPX800 est bien synchronisée.",
        "x": 160,
        "y": 280,
        "wires": []
    },
    {
        "id": "62f42068.824698",
        "type": "catch",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "En cas d'impossibilité de se connecter à l'IPX ou d'obtenir le fichier XML",
        "scope": [
            "6b83445f.95ef74"
        ],
        "uncaught": false,
        "x": 330,
        "y": 380,
        "wires": [
            [
                "92e23916.20c6b"
            ]
        ]
    },
    {
        "id": "92e23916.20c6b",
        "type": "function",
        "z": "f4db60bf.7cb8c",
        "g": "e102e7aa.73033",
        "name": "Construction email",
        "func": "msg.payload = \"Erreur de connexion IPX :\"+msg.error.message\nmsg.topic = \"ALERTE IOX : IPX800\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            []
        ]
    }
]
